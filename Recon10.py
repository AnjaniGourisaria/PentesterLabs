# python3 -c "for i in range(0, 256) : print('http://'+hex(i)+'.a.hackycorp.com/logo.png')" > urls.txt
import cv2
import numpy as np
import requests
from io import BytesIO
from PIL import Image
import os

# Define the lower and upper bounds for the red color in BGR format
lower_red = np.array([0, 0, 100])
upper_red = np.array([100, 100, 255])

# Create a directory to store the resulting images
output_dir = "red_images"
os.makedirs(output_dir, exist_ok=True)

# Open the text file containing image URLs
with open('urls.txt', 'r') as file:
    image_urls = file.read().splitlines()

# Loop through the image URLs
for idx, image_url in enumerate(image_urls):
    try:
        # Fetch the image from the URL
        response = requests.get(image_url)
        image_bytes = BytesIO(response.content)

        # Open the image using Pillow and convert to RGB
        img = Image.open(image_bytes).convert('RGB')

        # Convert to OpenCV format (BGR)
        img_cv = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)

        # Check if the image has three channels (BGR)
        if img_cv.shape[2] == 3:
            # Create a mask to select the red pixels
            mask = cv2.inRange(img_cv, lower_red, upper_red)

            # Check if any red pixels are found
            if np.any(mask > 0):
                # Save the image with red pixels to the output directory
                output_file = os.path.join(output_dir, f"red_image_{idx}.jpg")
                cv2.imwrite(output_file, img_cv)

                print(f"Found red in image {idx}: {image_url} - Saved as {output_file}")
        else:
            print(f"Skipped image {idx}: {image_url} - Image does not have three color channels")

    except Exception as e:
        print(f"Error processing image {idx}: {image_url} - {str(e)}")

print("Processing complete.")
